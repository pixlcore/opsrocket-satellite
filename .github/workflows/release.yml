name: Build and Package Satellite

on:
  push:
    tags:
      - '*' # Trigger on any tag push

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            platform: linux
          - os: ubuntu-latest
            arch: arm64
            platform: linux
          - os: macos-latest
            arch: x64
            platform: darwin
          - os: macos-latest
            arch: arm64
            platform: darwin
          - os: windows-latest
            arch: x64
            platform: windows
          - os: windows-latest
            arch: arm64
            platform: windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install --arch=${{ matrix.arch }} --platform=${{ matrix.platform }}

      - name: Download and Extract Node.js Runtime
        run: |
          NODE_VERSION=20.19.0
          NODE_DIST="node-v${NODE_VERSION}-${{ matrix.platform }}-${{ matrix.arch }}"
          NODE_TARBALL="${NODE_DIST}.tar.gz"

          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            NODE_DIST="node-v${NODE_VERSION}-win-${{ matrix.arch }}"
            NODE_TARBALL="${NODE_DIST}.zip"
            curl -O "https://nodejs.org/dist/v${NODE_VERSION}/${NODE_TARBALL}"
            unzip -d . "${NODE_TARBALL}"
          else
            curl -O "https://nodejs.org/dist/v${NODE_VERSION}/${NODE_TARBALL}"
            tar --strip-components=1 -xzf "${NODE_TARBALL}"
          fi

        shell: bash

      - name: Package Application
        run: |
          BUNDLE_NAME="satellite-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz"
          
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            # Windows-specific commands
            # Create temp dir outside of current directory to avoid including it in the archive
            TEMP_DIR="$RUNNER_TEMP/artifact"
            mkdir -p "$TEMP_DIR"
            
            # Use 7-Zip which is pre-installed on Windows runners
            # Create tar archive to stdout, then compress it to the temp directory
            7z a -ttar -so -- . | 7z a -si "$TEMP_DIR/$BUNDLE_NAME"
            
            # Move to workspace
            mv "$TEMP_DIR/$BUNDLE_NAME" $GITHUB_WORKSPACE/
          else
            # Unix commands (Linux/macOS)
            mkdir -p /tmp/artifact
            tar -czvf "/tmp/artifact/${BUNDLE_NAME}" .
            mv "/tmp/artifact/${BUNDLE_NAME}" $GITHUB_WORKSPACE/
          fi
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: satellite-${{ matrix.platform }}-${{ matrix.arch }}
          path: satellite-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload all tarballs to Release
        run: |
          for file in satellite-*/satellite-*.tar.gz; do
            echo "Uploading $file..."
            gh release upload ${{ github.ref_name }} "$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash